package com.example.spotifyintegrationtutorial;

import androidx.appcompat.app.AppCompatActivity;
import androidx.lifecycle.LiveData;
import androidx.lifecycle.Observer;

import android.os.Bundle;
import android.content.Intent;
import android.net.Uri;
import android.util.Log;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import com.spotify.sdk.android.auth.AuthorizationClient;
import com.spotify.sdk.android.auth.AuthorizationRequest;
import com.spotify.sdk.android.auth.AuthorizationResponse;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import okhttp3.Call;
import okhttp3.OkHttpClient;

public class MainActivity extends AppCompatActivity {

    public static final String CLIENT_ID = "4cd8ffbdc2de4027970140e1637726d2";
    public static final String REDIRECT_URI = "com.example.spotifyintegrationtutorial://auth";

    public static final int AUTH_TOKEN_REQUEST_CODE = 0;
    public static final int AUTH_CODE_REQUEST_CODE = 1;

    private final OkHttpClient mOkHttpClient = new OkHttpClient();
    private String mAccessToken, mAccessCode;
    private Call mCall;

    private CardViewRecommendation rec1;
    private CardViewRecommendation rec2;
    private CardViewRecommendation rec3;
    private CardViewRecommendation rec4;
    private CardViewRecommendation rec5;

    private CardViewRecommendation[] recs = new CardViewRecommendation[5];

    ImageView recImg;

    private TextView tokenTextView, codeTextView, profileTextView, recTextView;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        // Initialize the views
        tokenTextView = (TextView) findViewById(R.id.token_text_view);
        codeTextView = (TextView) findViewById(R.id.code_text_view);
        profileTextView = (TextView) findViewById(R.id.response_text_view);
        recTextView = (TextView) findViewById(R.id.textview_recommended);

        // Initialize the buttons
        Button tokenBtn = (Button) findViewById(R.id.token_btn);
        Button codeBtn = (Button) findViewById(R.id.code_btn);
        Button profileBtn = (Button) findViewById(R.id.profile_btn);
        Button recBtn = (Button) findViewById(R.id.button_recommend);
        recs[0] = findViewById(R.id.rec1);
        recs[1] = findViewById(R.id.rec2);
        recs[2] = findViewById(R.id.rec3);
        recs[3] = findViewById(R.id.rec4);
        recs[4] = findViewById(R.id.rec5);

        // Set the click listeners for the buttons

        tokenBtn.setOnClickListener((v) -> {
            getToken();
        });

        codeBtn.setOnClickListener((v) -> {
            getCode();
        });

        profileBtn.setOnClickListener((v) -> {
            onGetUserProfileClicked();
        });

        recBtn.setOnClickListener((v) -> {
            onGetUserRecsClicked();
        });

    }

    /**
     * Get token from Spotify
     * This method will open the Spotify login activity and get the token
     * What is token?
     * https://developer.spotify.com/documentation/general/guides/authorization-guide/
     */
    public void getToken() {
        AuthorizationRequest.Builder builder = new AuthorizationRequest.Builder(CLIENT_ID, AuthorizationResponse.Type.TOKEN, REDIRECT_URI);
        builder.setScopes(new String[] {"user-follow-read", "user-read-email", "user-library-read", "user-top-read"});
        final AuthorizationRequest request = builder.build();
        AuthorizationClient.openLoginActivity(MainActivity.this, AUTH_TOKEN_REQUEST_CODE, request);
    }

    /**
     * Get code from Spotify
     * This method will open the Spotify login activity and get the code
     * What is code?
     * https://developer.spotify.com/documentation/general/guides/authorization-guide/
     */
    public void getCode() {
        final AuthorizationRequest request = getAuthenticationRequest(AuthorizationResponse.Type.CODE);
        AuthorizationClient.openLoginActivity(MainActivity.this, AUTH_CODE_REQUEST_CODE, request);
    }


    /**
     * When the app leaves this activity to momentarily get a token/code, this function
     * fetches the result of that external activity to get the response from Spotify
     */
    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        final AuthorizationResponse response = AuthorizationClient.getResponse(resultCode, data);

        // Check which request code is present (if any)
        if (AUTH_TOKEN_REQUEST_CODE == requestCode) {
            mAccessToken = response.getAccessToken();
            setTextAsync(mAccessToken, tokenTextView);

        } else if (AUTH_CODE_REQUEST_CODE == requestCode) {
            mAccessCode = response.getCode();
            setTextAsync(mAccessCode, codeTextView);
        }
    }

    /**
     * Get user profile
     * This method will get the user profile using the token
     */
    public void onGetUserProfileClicked() {
        SpotifyAPICaller caller;
        try {
            caller = new SpotifyAPICaller(mAccessToken);
        } catch (IllegalArgumentException e) {
            Toast.makeText(this, "Cannot get user profile without logging in!", Toast.LENGTH_SHORT).show();
            return;
        }
        LiveData<JSONObject> obj = caller.getSpotifyUserProfile();
        obj.observe(this, new Observer<JSONObject>() {
            @Override
            public void onChanged(JSONObject jsonObject) {
                setTextAsync(jsonObject.toString(), profileTextView);
            }
        });
    }

    public void onGetUserRecsClicked() {
        SpotifyAPICaller caller;
        try {
            caller = new SpotifyAPICaller(mAccessToken);
        } catch (IllegalArgumentException e) {
            Toast.makeText(this, "Cannot get recommendations without logging in!", Toast.LENGTH_SHORT).show();
            return;
        }
        caller.getTopTracks().observe(this, new Observer<JSONObject>() {
            @Override
            public void onChanged(JSONObject jsonObject) {
                String[] s = new String[5];
                try {
                    JSONArray arr = jsonObject.getJSONArray("items");
                    for (int i = 0; i < 5; i++) {
                        if (arr.getJSONObject(i).get("id") != "") {
                            s[i] = arr.getJSONObject(i).get("id").toString();
                        }
                    }
                } catch (JSONException e) {
                    Log.e("JSON", "Cannot parse data: " + e);
                }
                caller.getRecommendations(s).observe(MainActivity.this, new Observer<JSONObject>() {
                    @Override
                    public void onChanged(JSONObject jsonObject) {
                        //setTextAsync(jsonObject.toString(), recTextView);
                        try {
                            JSONArray tracks = jsonObject.getJSONArray("tracks");
                            for (int i = 0; i < recs.length; i++) {
                                String imgUrl = tracks.getJSONObject(i).getJSONObject("album")
                                        .getJSONArray("images").getJSONObject(0).getString("url");
                                String songTitle = tracks.getJSONObject(i).getString("name");
                                String artist = tracks.getJSONObject(i).getJSONArray("artists")
                                        .getJSONObject(0).getString("name");
                                recs[i].setRecommendedArtist(artist);
                                recs[i].setRecommendedSong(songTitle);
                                recs[i].setRecommendedAlbumArt(imgUrl, MainActivity.this);
                            }
//                            String imgUrl = tracks.getJSONObject(0).getJSONObject("album")
//                                    .getJSONArray("images").getJSONObject(0).getString("url");
//                            String songTitle = tracks.getJSONObject(0).getString("name");
//                            String artist = tracks.getJSONObject(0).getJSONArray("artists")
//                                    .getJSONObject(0).getString("name");
//                            rec1.setRecommendedSong(songTitle);
//                            rec1.setRecommendedAlbumArt(imgUrl, MainActivity.this);
//                            rec1.setRecommendedArtist(artist);

                        } catch (JSONException e) {
                            Log.e("JSON", "Cannot parse data: " + e);
                        }
                    }
                });
            }
        });

//        String[] ids;
//        try {
//            JSONArray arr = topTracks.getJSONArray("items");
//            ids = new String[arr.length()];
//            for (int i = 0; i < arr.length(); i++) {
//                ids[i] = arr.getJSONObject(i).get("id").toString();
//            }
//
//            JSONObject recs = caller.getRecommendations(ids);
//            setTextAsync(recs.toString(), recTextView);
//        } catch (JSONException e) {
//            Log.d("JSON", "Failed to parse data: " + e);
//        }


//        if (mAccessToken == null) {
//            Toast.makeText(this, "No access token, no recommendations!", Toast.LENGTH_SHORT).show();
//            return;
//        }
//
//        final Request artistRequest = new Request.Builder()
//                .url("https://api.spotify.com/v1/me/top/tracks?limit=5")
//                .addHeader("Authorization", "Bearer " + mAccessToken)
//                .build();
//        cancelCall();
//        mCall = mOkHttpClient.newCall(artistRequest);
//
//        mCall.enqueue(new Callback() {
//           @Override
//           public void onFailure(Call call, IOException e) {
//               Log.d("HTTP", "Failed to fetch data: " + e.toString());
//               Toast.makeText(MainActivity.this, "You dun goofed", Toast.LENGTH_SHORT).show();
//           }
//
//           public void onResponse(Call call, Response response) throws IOException {
//               try {
//                   final JSONObject jsonObject = new JSONObject(response.body().string());
//                   setTextAsync(jsonObject.toString(), recTextView);
//
//                   String[] ids = new String[5];
//
//                   JSONArray arr = jsonObject.getJSONArray("items");
//
//                   for (int i = 0; i < 5; i++) {
//                       ids[i] = arr.getJSONObject(i).getString("id");
//                   }
//
//                   String test = new String(
//                           "https://api.spotify.com/v1/recommendations?seed_tracks="
//                           + ids[0]
//                           + "%2C"
//                           + ids[1]
//                           + "%2C"
//                           + ids[2]
//                           + "%2C"
//                           + ids[3]
//                           + "%2C"
//                           + ids[4]
//                   );
//                   final Request recRequest = new Request.Builder()
//                           .url(test
//                           )
//                           .addHeader("Authorization", "Bearer " + mAccessToken)
//                           .build();
//                   cancelCall();
//                   setTextAsync(test, recTextView);
//                   mCall = mOkHttpClient.newCall(recRequest);
//                   mCall.enqueue(new Callback() {
//                       public void onFailure(Call call, IOException e) {
//                           Log.d("HTTP", "Failed to fetch data: " +e.toString());
//                           Toast.makeText(MainActivity.this, "You dun goofed 2", Toast.LENGTH_SHORT).show();
//                       }
//
//                       public void onResponse(Call call, Response response) throws IOException {
//                           try {
//                               JSONObject jsonObject1 = new JSONObject(response.body().string());
//                               setTextAsync(jsonObject1.toString(), recTextView);
//                           } catch (JSONException e) {
//                               Log.d("JSON", "Failed to parse data: " + e.toString());
//                               Toast.makeText(MainActivity.this, "JSON dun goofed 2", Toast.LENGTH_SHORT).show();
//                           }
//                       }
//                   });
//               } catch (JSONException e) {
//                   Log.d("JSON", "Failed to parse data: " + e.toString());
//                   Toast.makeText(MainActivity.this, "JSON dun goofed", Toast.LENGTH_SHORT).show();
//               }
//           }
//        });
    }

    /**
     * Creates a UI thread to update a TextView in the background
     * Reduces UI latency and makes the system perform more consistently
     *
     * @param text the text to set
     * @param textView TextView object to update
     */
    private void setTextAsync(final String text, TextView textView) {
        runOnUiThread(() -> textView.setText(text));
    }

    /**
     * Get authentication request
     *
     * @param type the type of the request
     * @return the authentication request
     */
    private AuthorizationRequest getAuthenticationRequest(AuthorizationResponse.Type type) {
        return new AuthorizationRequest.Builder(CLIENT_ID, type, getRedirectUri().toString())
                .setShowDialog(false)
                .setScopes(new String[] { "user-read-email" }) // <--- Change the scope of your requested token here
                .setCampaign("your-campaign-token")
                .build();
    }

    /**
     * Gets the redirect Uri for Spotify
     *
     * @return redirect Uri object
     */
    private Uri getRedirectUri() {
        return Uri.parse(REDIRECT_URI);
    }

    private void cancelCall() {
        if (mCall != null) {
            mCall.cancel();
        }
    }

    @Override
    protected void onDestroy() {
        cancelCall();
        super.onDestroy();
    }
}